# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    version: 7.x
    installationPath: $(Agent.ToolsDirectory)/dotnet
# - task: NuGetAuthenticate@1
#   inputs:
#     nuGetServiceConnections: 'nuget-org'


- task: DotNetCoreCLI@2
  displayName: 'Restore Projects'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: 'b78351fb-acc3-4d97-a67c-2998c989189e'
    projects: './Ploch.Common.sln'
    arguments: '--configuration $(buildConfiguration)'
    configuration: $(buildConfiguration)

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'sonar-cloud'
    organization: 'ploch'
    scannerMode: 'MSBuild'
    projectKey: 'ploch_common'
    projectName: 'common'
    extraProperties: |
     sonar.cs.xunit.reportsPaths=${Agent.TempDirectory}/**/XUnit.TestResults.xml
     sonar.cs.opencover.reportsPaths=${Agent.TempDirectory}/**/opencoverCoverage.xml
     sonar.verbose=true

- task: DotNetCoreCLI@2
  displayName: 'Build Projects'  
  inputs:
    command: 'build'    
    projects: './Ploch.Common.sln'
    arguments: '--configuration $(buildConfiguration)'
    configuration: $(buildConfiguration)

- task: DotNetCoreCLI@2
  name: 'RunTests'
  displayName: 'Run Tests'
  inputs:
    command: test
    # projects: './Ploch.Common.sln'
    projects: '**/*.Tests.csproj'
    # arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/Coverage/'
    arguments: '--configuration $(BuildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Agent.TempDirectory)/coverage/ /p:MergeWith=$(Agent.TempDirectory)/coverage/ --collect "Code coverage"'
    publishTestResults: true

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
      testResultsFormat: VSTest
      testResultsFiles: "$(Agent.TempDirectory)/**.*trx"
      mergeTestResults: true
      failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
# - task: DotNetCoreCLI@2
#   displayName: 'Nuget Pack'
#   inputs:
#     command: pack
#     nuGetFeedType: internal
#     includeNuGetOrg: true   
#     feedsToUse: select
#     vstsFeed: 'b78351fb-acc3-4d97-a67c-2998c989189e'      
#     projects: './Ploch.Common.sln'
#     arguments: '--no-restore --no-build --configuration $(buildConfiguration)'
#     versioningScheme: byPrereleaseNumber
#     majorVersion: '$(Major)'
#     minorVersion: '$(Minor)'
#     patchVersion: '$(Patch)'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  displayName: 'DotNet Pack'
  inputs:
    command: 'pack'
    nobuild: true
    packagesToPack: './Ploch.Common.sln'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'PackageVersion'  
    # command: 'pack'
    # packagesToPack: './Ploch.Common.sln'
    # nobuild: true    
    # versioningScheme: 'byPrereleaseNumber'
    # majorVersion: '$(Major)'
    # minorVersion: '$(Minor)'
    # patchVersion: '$(Patch)'
    # arguments: '--configuration $(buildConfiguration)'
#     # configuration: $(buildConfiguration)

# - task: DotNetCoreCLI@2
#   displayName: 'NuGet Push Azure Devop - Internal'
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: 'b78351fb-acc3-4d97-a67c-2998c989189e'


- task: NuGetCommand@2
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'nuget-org'
    verbosityPush: 'Normal'